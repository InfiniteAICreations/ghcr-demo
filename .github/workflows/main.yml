name: Build and publish multi-arch container images

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: ''

jobs:
  ghr_push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.reason != ''

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log-in to ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

#      - name: Extract Org and Repo Name
#        run: |
#          export DOCKER_BUILD_ORG=$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]' | cut -d '/' -f 1)
#          export DOCKER_BUILD_REPO=$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]' | cut -d '/' -f 2)

      #      - name: Read version from VERSION file
#        id: readv
#        uses: jaywcjlove/github-action-read-file@v2
#        with:
#          path: opendevin/sandbox/VERSION

      - name: Build and push multi-arch container images
        run: |
          # set env for fork repo
          DOCKER_BUILD_ORG=$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]' | cut -d '/' -f 1)
          # Find directories containing Dockerfile but not containing .dockerfileignore
          while IFS= read -r dockerfile_dir; do
            # Check if image was already exist in ghcr.io
            FULL_IMAGE=$(make get-full-image DOCKER_BUILD_ORG=$DOCKER_BUILD_ORG)
            EXISTS=$(docker manifest inspect "$FULL_IMAGE" > /dev/null 2>&1 && echo "true" || echo "false")
            if [ "$EXISTS" == "true" ]; then
              echo "Image $FULL_IMAGE already exists in ghcr.io, skipping build and push"
              continue
            fi
            # Check if .dockerfileignore exists in the directory
            if [ ! -f "$dockerfile_dir/.dockerfileignore" ]; then
              # Change directory and execute 'make all'
              pushd "$dockerfile_dir" > /dev/null
              make all DOCKER_BUILD_ORG=$DOCKER_BUILD_ORG
              popd > /dev/null
            fi
          done < <(find . -type f -name Dockerfile -exec dirname {} \; | sort -u)

#          # Find directories containing Dockerfile but not containing .dockerfileignore
#          for dockerfile_dir in $(find . -type f -name Dockerfile -exec dirname {} \; | sort -u | grep -v "$(find . -type f -name .dockerfileignore -exec dirname {} \; | sort -u)"); do
#              # Change directory and execute 'make all'
#              pushd $dockerfile_dir > /dev/null
#              make all
#              popd > /dev/null
#          done

#          for dir in evaluation/SWE-bench opendevin/sandbox; do
#            cd $dir
#            make all
#            cd -
#          done